" if has('python3')
"   silent! python3 1
" endif

filetype plugin on
set omnifunc=syntaxcomplete#Complete


call plug#begin('~/.vim/plugged')
Plug 'davidhalter/jedi-vim'
Plug 'ycm-core/YouCompleteMe'
Plug 'klen/python-mode'
Plug 'vim-python/python-syntax'
Plug 'mgedmin/python-imports.vim'
Plug 'ludovicchabant/vim-gutentags'
Plug 'kien/ctrlp.vim'
"Plug 'vim-syntastic/syntastic'
call plug#end()

syntax enable
set tabstop=4
set shiftwidth=4
set expandtab
set number
filetype indent on
set autoindent

let g:ycm_global_ycm_extra_conf = "/home/robin/.vim/plugged/YouCompleteMe/.ycm_extra_conf.py"

let g:gutentags_modules = ['ctags']
let g:gutentags_cache_dir = '~/.vim/gutentags'

map <F5>    :ImportName<CR>
map <C-F5>  :ImportNameHere<CR>
map <C-E>   :b#<CR>

map <F2>    :mksession! ~/vim_session<CR>
map <F3>    :source ~/vim_session<CR>
map <F7>    :Vexplore<CR>
map <F8>    :!python ~/bin/create_package.py 
map <F9>    :!python ~/bin/create_python_file.py  

let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
augroup ProjectDrawer
  autocmd!
  "autocmd VimEnter * :Vexplore
augroup END

autocmd Filetype netrw nmap <buffer> <F6> ma:argdo tabnew<CR>

function MoveToPrevTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() != 1
    close!
    if l:tab_nr == tabpagenr('$')
      tabprev
    endif
    sp
  else
    close!
    exe "0tabnew"
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc


function MoveToNextTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() < tab_nr
    close!
    if l:tab_nr == tabpagenr('$')
      tabnext
    endif
    sp
  else
    close!
    tabnew
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc


map mt    :call MoveToNextTab()<CR>
map mT    :call MoveToPrevTab()<CR>

"let g:syntastic_python_checkers = ['pylint', 'flake8']

let g:pymode_rope = 0
let g:pymode_virtualenv=1

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch 

" Show matching brackets when text indicator is over them
set showmatch 
" How many tenths of a second to blink when matching brackets
set mat=2


" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500


" Enable 256 colors palette in Gnome Terminal
if $COLORTERM == 'gnome-terminal'
    set t_Co=256
endif

try
    colorscheme desert
catch
endtry

set background=dark

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8


" Close the current buffer
map <leader>bd :Bclose<cr>:tabclose<cr>gT

" Close all the buffers
map <leader>ba :bufdo bd<cr>

map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 
map <leader>t<leader> :tabnext 

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()


let g:netrw_keepdir = 0
